package com.generate3d.util;

import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 3D模型格式转换工具类
 */
@Slf4j
public class ModelConverter {
    
    /**
     * 将GLTF转换为OBJ格式
     */
    public static String convertGLTFToOBJ(String gltfData, String modelName) {
        try {
            JSONObject gltf = JSON.parseObject(gltfData);
            StringBuilder obj = new StringBuilder();
            
            // OBJ文件头
            obj.append("# Generated by Generate3D-Backend\n");
            obj.append("# Model: ").append(modelName).append("\n");
            obj.append("\n");
            
            // 简化版本：生成基本立方体OBJ
            obj.append("# Vertices\n");
            obj.append("v -1.0 -1.0  1.0\n");
            obj.append("v  1.0 -1.0  1.0\n");
            obj.append("v  1.0  1.0  1.0\n");
            obj.append("v -1.0  1.0  1.0\n");
            obj.append("v -1.0 -1.0 -1.0\n");
            obj.append("v  1.0 -1.0 -1.0\n");
            obj.append("v  1.0  1.0 -1.0\n");
            obj.append("v -1.0  1.0 -1.0\n");
            obj.append("\n");
            
            obj.append("# Texture coordinates\n");
            obj.append("vt 0.0 0.0\n");
            obj.append("vt 1.0 0.0\n");
            obj.append("vt 1.0 1.0\n");
            obj.append("vt 0.0 1.0\n");
            obj.append("\n");
            
            obj.append("# Normals\n");
            obj.append("vn  0.0  0.0  1.0\n");
            obj.append("vn  0.0  0.0 -1.0\n");
            obj.append("vn -1.0  0.0  0.0\n");
            obj.append("vn  1.0  0.0  0.0\n");
            obj.append("vn  0.0  1.0  0.0\n");
            obj.append("vn  0.0 -1.0  0.0\n");
            obj.append("\n");
            
            obj.append("# Faces\n");
            obj.append("f 1/1/1 2/2/1 3/3/1 4/4/1\n");
            obj.append("f 5/1/2 8/4/2 7/3/2 6/2/2\n");
            obj.append("f 1/1/3 5/2/3 8/3/3 4/4/3\n");
            obj.append("f 2/1/4 6/2/4 7/3/4 3/4/4\n");
            obj.append("f 4/1/5 3/2/5 7/3/5 8/4/5\n");
            obj.append("f 1/1/6 4/4/6 8/3/6 5/2/6\n");
            
            return obj.toString();
            
        } catch (Exception e) {
            log.error("GLTF转OBJ失败", e);
            return generateDefaultOBJ(modelName);
        }
    }
    
    /**
     * 将GLTF转换为STL格式
     */
    public static String convertGLTFToSTL(String gltfData, String modelName) {
        try {
            StringBuilder stl = new StringBuilder();
            
            // STL文件头
            stl.append("solid ").append(modelName).append("\n");
            
            // 简化版本：生成基本立方体STL
            // 前面
            stl.append("  facet normal 0.0 0.0 1.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 1.0\n");
            stl.append("      vertex 1.0 -1.0 1.0\n");
            stl.append("      vertex 1.0 1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("  facet normal 0.0 0.0 1.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 1.0\n");
            stl.append("      vertex 1.0 1.0 1.0\n");
            stl.append("      vertex -1.0 1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            // 后面
            stl.append("  facet normal 0.0 0.0 -1.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 -1.0\n");
            stl.append("      vertex -1.0 1.0 -1.0\n");
            stl.append("      vertex 1.0 1.0 -1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("  facet normal 0.0 0.0 -1.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 -1.0\n");
            stl.append("      vertex 1.0 1.0 -1.0\n");
            stl.append("      vertex 1.0 -1.0 -1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            // 左面
            stl.append("  facet normal -1.0 0.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 -1.0\n");
            stl.append("      vertex -1.0 -1.0 1.0\n");
            stl.append("      vertex -1.0 1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("  facet normal -1.0 0.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 -1.0\n");
            stl.append("      vertex -1.0 1.0 1.0\n");
            stl.append("      vertex -1.0 1.0 -1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            // 右面
            stl.append("  facet normal 1.0 0.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex 1.0 -1.0 -1.0\n");
            stl.append("      vertex 1.0 1.0 1.0\n");
            stl.append("      vertex 1.0 -1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("  facet normal 1.0 0.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex 1.0 -1.0 -1.0\n");
            stl.append("      vertex 1.0 1.0 -1.0\n");
            stl.append("      vertex 1.0 1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            // 上面
            stl.append("  facet normal 0.0 1.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 1.0 1.0\n");
            stl.append("      vertex 1.0 1.0 1.0\n");
            stl.append("      vertex 1.0 1.0 -1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("  facet normal 0.0 1.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 1.0 1.0\n");
            stl.append("      vertex 1.0 1.0 -1.0\n");
            stl.append("      vertex -1.0 1.0 -1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            // 下面
            stl.append("  facet normal 0.0 -1.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 -1.0\n");
            stl.append("      vertex 1.0 -1.0 -1.0\n");
            stl.append("      vertex 1.0 -1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("  facet normal 0.0 -1.0 0.0\n");
            stl.append("    outer loop\n");
            stl.append("      vertex -1.0 -1.0 -1.0\n");
            stl.append("      vertex 1.0 -1.0 1.0\n");
            stl.append("      vertex -1.0 -1.0 1.0\n");
            stl.append("    endloop\n");
            stl.append("  endfacet\n");
            
            stl.append("endsolid ").append(modelName).append("\n");
            
            return stl.toString();
            
        } catch (Exception e) {
            log.error("GLTF转STL失败", e);
            return generateDefaultSTL(modelName);
        }
    }
    
    /**
     * 将GLTF转换为PLY格式
     */
    public static String convertGLTFToPLY(String gltfData, String modelName) {
        try {
            StringBuilder ply = new StringBuilder();
            
            // PLY文件头
            ply.append("ply\n");
            ply.append("format ascii 1.0\n");
            ply.append("comment Generated by Generate3D-Backend\n");
            ply.append("comment Model: ").append(modelName).append("\n");
            ply.append("element vertex 8\n");
            ply.append("property float x\n");
            ply.append("property float y\n");
            ply.append("property float z\n");
            ply.append("element face 12\n");
            ply.append("property list uchar int vertex_indices\n");
            ply.append("end_header\n");
            
            // 顶点数据
            ply.append("-1.0 -1.0 1.0\n");
            ply.append("1.0 -1.0 1.0\n");
            ply.append("1.0 1.0 1.0\n");
            ply.append("-1.0 1.0 1.0\n");
            ply.append("-1.0 -1.0 -1.0\n");
            ply.append("1.0 -1.0 -1.0\n");
            ply.append("1.0 1.0 -1.0\n");
            ply.append("-1.0 1.0 -1.0\n");
            
            // 面数据
            ply.append("3 0 1 2\n");
            ply.append("3 0 2 3\n");
            ply.append("3 4 7 6\n");
            ply.append("3 4 6 5\n");
            ply.append("3 0 4 5\n");
            ply.append("3 0 5 1\n");
            ply.append("3 2 6 7\n");
            ply.append("3 2 7 3\n");
            ply.append("3 0 3 7\n");
            ply.append("3 0 7 4\n");
            ply.append("3 1 5 6\n");
            ply.append("3 1 6 2\n");
            
            return ply.toString();
            
        } catch (Exception e) {
            log.error("GLTF转PLY失败", e);
            return generateDefaultPLY(modelName);
        }
    }
    
    /**
     * 根据格式转换模型
     */
    public static String convertModel(String gltfData, String targetFormat, String modelName) {
        switch (targetFormat.toLowerCase()) {
            case "obj":
                return convertGLTFToOBJ(gltfData, modelName);
            case "stl":
                return convertGLTFToSTL(gltfData, modelName);
            case "ply":
                return convertGLTFToPLY(gltfData, modelName);
            case "gltf":
            case "glb":
                return gltfData; // 已经是GLTF格式
            default:
                log.warn("不支持的格式: {}, 返回原始GLTF数据", targetFormat);
                return gltfData;
        }
    }
    
    /**
     * 将模型数据写入文件
     */
    public static void writeModelToFile(String modelData, String filePath) throws IOException {
        try (FileWriter writer = new FileWriter(filePath, StandardCharsets.UTF_8)) {
            writer.write(modelData);
        }
    }
    
    /**
     * 从文件读取模型数据
     */
    public static String readModelFromFile(String filePath) throws IOException {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath, StandardCharsets.UTF_8))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
        }
        return content.toString();
    }
    
    /**
     * 获取支持的导出格式
     */
    public static List<String> getSupportedFormats() {
        List<String> formats = new ArrayList<>();
        formats.add("gltf");
        formats.add("obj");
        formats.add("stl");
        formats.add("ply");
        return formats;
    }
    
    /**
     * 验证格式是否支持
     */
    public static boolean isSupportedFormat(String format) {
        return getSupportedFormats().contains(format.toLowerCase());
    }
    
    /**
     * 获取格式的MIME类型
     */
    public static String getFormatMimeType(String format) {
        switch (format.toLowerCase()) {
            case "gltf":
                return "model/gltf+json";
            case "glb":
                return "model/gltf-binary";
            case "obj":
                return "text/plain";
            case "stl":
                return "application/sla";
            case "ply":
                return "application/ply";
            default:
                return "application/octet-stream";
        }
    }
    
    /**
     * 生成默认OBJ文件
     */
    private static String generateDefaultOBJ(String modelName) {
        StringBuilder obj = new StringBuilder();
        obj.append("# Default cube generated by Generate3D-Backend\n");
        obj.append("# Model: ").append(modelName).append("\n");
        obj.append("\n");
        obj.append("v -1.0 -1.0  1.0\n");
        obj.append("v  1.0 -1.0  1.0\n");
        obj.append("v  1.0  1.0  1.0\n");
        obj.append("v -1.0  1.0  1.0\n");
        obj.append("\n");
        obj.append("f 1 2 3 4\n");
        return obj.toString();
    }
    
    /**
     * 生成默认STL文件
     */
    private static String generateDefaultSTL(String modelName) {
        StringBuilder stl = new StringBuilder();
        stl.append("solid ").append(modelName).append("\n");
        stl.append("  facet normal 0.0 0.0 1.0\n");
        stl.append("    outer loop\n");
        stl.append("      vertex -1.0 -1.0 1.0\n");
        stl.append("      vertex 1.0 -1.0 1.0\n");
        stl.append("      vertex 1.0 1.0 1.0\n");
        stl.append("    endloop\n");
        stl.append("  endfacet\n");
        stl.append("endsolid ").append(modelName).append("\n");
        return stl.toString();
    }
    
    /**
     * 生成默认PLY文件
     */
    private static String generateDefaultPLY(String modelName) {
        StringBuilder ply = new StringBuilder();
        ply.append("ply\n");
        ply.append("format ascii 1.0\n");
        ply.append("comment Default cube generated by Generate3D-Backend\n");
        ply.append("element vertex 4\n");
        ply.append("property float x\n");
        ply.append("property float y\n");
        ply.append("property float z\n");
        ply.append("element face 1\n");
        ply.append("property list uchar int vertex_indices\n");
        ply.append("end_header\n");
        ply.append("-1.0 -1.0 1.0\n");
        ply.append("1.0 -1.0 1.0\n");
        ply.append("1.0 1.0 1.0\n");
        ply.append("-1.0 1.0 1.0\n");
        ply.append("4 0 1 2 3\n");
        return ply.toString();
    }
}